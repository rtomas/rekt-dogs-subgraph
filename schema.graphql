type DogsInfo @entity {
    id: ID!

    "Number of minted token"
    numTokens: BigInt!

    "number of owners"
    numOwners: BigInt!

    "number of different account's owners including the ones that have sell/burn"
    numAccounts: BigInt!

    "Last Minted time in seconds"
    lastMintDate: BigInt!

    "Last transfer in seconds"
    lastTransferDate: BigInt!

    "Last Burned in seconds"
    lastBurned: BigInt!
}

type Block @entity {
    "Internal ID "
    id: ID!

    "event timestamp"
    timestamp: BigInt!

    "Block's number"
    number: BigInt!
}

type Token @entity {
    "Id of the Token"
    id: ID!

    tokenID: BigInt!

    "Owner's Account address"
    owner: Account!

    "URI that points the metadata of the NFT"
    uri: String!

    "Minted time in seconds (?)"
    mintTime: BigInt!

    "Current burned status"
    burned: Boolean
}

type Account @entity {
    "address of the Account"
    id: ID!

    "Address of the Account"
    address: Bytes!

    "Array of tokens owned by the Account"
    tokens: [Token!]! @derivedFrom(field: "owner")

    "number of tokens owned by the Account"
    numTokens: BigInt!
}

enum TranasctionType {
    MINT
    BURN
    TRANSFER
}

interface Transaction {
    "Internal ID used for indexation"
    id: ID!

    "Seller account"
    from: Account

    "Buyer account"
    to: Account

    "Current transaction type"
    type: TranasctionType!

    "Related block"
    block: Block!
}

type Burn implements Transaction @entity {
    "hash of the transaction"
    id: ID!

    "Token transfer"
    token: Token!

    "Address of the sender"
    from: Account

    "Address of the receiver"
    to: Account

    "Related block"
    block: Block!

    "Current transaction type"
    type: TranasctionType!
}

type Mint implements Transaction @entity {
    "hash of the transaction"
    id: ID!

    "Token transfer"
    token: Token!

    "Address of the sender"
    from: Account

    "Address of the receiver"
    to: Account

    "Related block"
    block: Block!

    "Current transaction type"
    type: TranasctionType!
}

type Transfer implements Transaction @entity {
    "hash of the transaction"
    id: ID!

    "Token transfer"
    token: Token!

    "Address of the sender"
    from: Account

    "Address of the receiver"
    to: Account

    "Related block"
    block: Block!

    "Current transaction type"
    type: TranasctionType!
}

type DailySnapshot @entity {
    " { Contract address }-{# of days since Unix epoch time} "
    id: ID!

    " Block number where the snapshot is taken. "
    block: Block!

    " Number of total owner up to the snapshot. "
    numOwners: BigInt!

    " Total tokens transfer daily. "
    dailyTransfersCount: Int!
}

type MonthlySnapshot @entity {
    " { Contract address }-{# of days since Unix epoch time} "
    id: ID!

    " Block number where the snapshot is taken. "
    block: Block!

    " Number of total owner up to the snapshot. "
    numOwners: BigInt!

    " Total tokens transfer monthly. "
    monthlyTransfersCount: Int!
}
